-fields.sort{|a,b| a <=> b }.each do |name, fld|
  - deprecated = fld[:description] && fld[:description].downcase[/deprecated/]

  .field(data-name=name class="#{deprecated ? 'deprecated' : ''}")
    .head
      - if deprecated
        %i.icon-thumbs-down
      = '*' if fld[:required]
      = name
      %small="#{fld[:type]}"
      - if fld[:format] && !fld[:properties]
        %small="(#{fld[:format]})"
      - if fld[:properties] && fld[:properties]['$ref']
        %small.link
          -link = fld[:properties]['$ref'][/\.\/(.*)\.json/, 1]
          %a(href="##{link}")
            ="[#{link.humanize}]" if fld[:type]=='array'
            ="(#{link.humanize})" if fld[:type]=='object'
      - if fld[:items].present?
        %small.link
          - refs = fld[:items].is_a?(Array) ? fld[:items] : [fld[:items]]
          - links = []
          - refs.each do |ref|
            - link = ref['$ref'][/\.\/(.*)\.json/, 1]
            - links << "<a href='##{link}'>#{link.humanize}</a>"
          - links_html = links.join(' | ')
          !="[#{links_html}]" if fld[:type]=='array'
          !="(#{links_html})" if fld[:type]=='object'

      -if fld[:enum]
        %small="(enum)"
      - [%w(minItems maxItems), %w(minimum maximum), %w(minLength maxLength)] .each do |i|
        - if fld[ i[0] ] == fld[ i[1] ]
          %small="#{fld[ i[0] ]}"
        - else
          - if fld[ i[0] ]
            %small="&ge; #{fld[ i[0] ]}"
          - if fld[ i[1] ]
            %small="&le; #{fld[ i[1] ]}"

    .props
      - deprecated = fld[:description] && fld[:description].downcase[/deprecated/]
      - depr_class = deprecated ? 'deprecated' : ''
      %p= fld[:description]
      - fld.sort{|a,b| a <=> b }.each do |k,v|
        - unless %w(description required readonly type format minItems maxItems maximum minimum minLength maxLength).include?("#{k}")
          - if k == 'enum'
            %strong='Valid Values'
            %p= v.join(', ')
          - elsif k == 'properties' && v['$ref']
            %strong='See'
            %p
              -link = v['$ref'][/\.\/(.*)\.json/, 1]
              %a(href="##{link}")="#{link.humanize}"
          - elsif k == 'items' && v.present?
            %strong='See'
            %p
              - refs = v.is_a?(Array) ? v : [v]
              - refs.each do |ref|
                - link = ref['$ref'][/\.\/(.*)\.json/, 1]
                %a(href="##{link}")="#{link.humanize}"
          - else
            %strong=k.upcase
            %p= v